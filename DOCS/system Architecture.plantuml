@startuml systemArch
!define RECTANGLE_SIZE 120
!define RECT_COLOR #EEEEFF
!define SERVICE_COLOR #CCDDFF
!define DB_COLOR #FFDDDD
!define CACHE_COLOR #FFFFDD
!define QUEUE_COLOR #EEDDFF
!define MONITORING_COLOR #DDEEFF
left to right direction
skinparam Linetype polyline
skinparam rectangle {
    BackgroundColor RECT_COLOR
    BorderColor black
    FontSize 12
    FontName Arial
}

skinparam database {
    BackgroundColor DB_COLOR
    BorderColor black
    FontSize 12
    FontName Arial
}

skinparam cloud {
    BackgroundColor CACHE_COLOR
    BorderColor black
    FontSize 12
    FontName Arial
}

skinparam queue {
    BackgroundColor QUEUE_COLOR
    BorderColor black
    FontSize 12
    FontName Arial
}

skinparam package {
    BackgroundColor SERVICE_COLOR
    BorderColor black
    FontSize 12
    FontName Arial
}

skinparam component {
    BackgroundColor MONITORING_COLOR
    BorderColor black
    FontSize 12
    FontName Arial
}

actor Customer
actor Cook
actor Admin

rectangle "API Gateway" as APIGateway {
    rectangle "Load Balancer" as LB
}

rectangle "Authentication Service" as AuthService {
    [JWT Token Generation]
    [OAuth2 Integration]
}

rectangle "Notification Service" as NotificationService {
    [Email Notification]
    [SMS Notification]
    [Push Notification]
}
cloud "Content Delivery Network (CDN)" as CDN {
    [Static Assets]
    [Images]
    [CSS/JS Files]
}
package "Microservices" as MS {
    rectangle "Cart Service" as CartService {
        [Add to Cart]
        [View Cart]
    }
    rectangle "Menu Service" as MenuService {
        [View Menu]
        [Search Menu]
    }
    rectangle "Order Service" as OrderService {
        [Place Order]
        [Order Validation]
    }
    rectangle "Wait Time Service" as WaitTimeService {
        [Calculate Wait Time]
        [Update Wait Time]
    }
    rectangle "Payment Service" as PaymentService {
        [Process Payment]
        [Verify Payment]
    }
    rectangle "Tracking Service" as TrackingService {
        [Track Order]
        [Order Status Update]
    }
    rectangle "Order Management Service" as OrderManagementService {
        [View Orders]
        [Mark Order Complete]
    }
    rectangle "User Management Service" as UserManagementService {
        [Add User]
        [Remove User]
        [Update User Role]
    }
    rectangle "Menu Management Service" as MenuManagementService {
        [Add Menu Item]
        [Update Menu Item]
        [Remove Menu Item]
    }
    rectangle "Reporting Service" as ReportingService {
        [View Reports]
        [Generate Report]
    }
}




component "Monitoring and Logging" as MonitoringLogging {
    [Event Logs]
    [Performance Metrics]
    [Error Tracking]
    [Security Logs]
}

package "Storage" as database{
    database "SQL Database" as SQLDB {
        [User Data]
        [Order Data]
        [Payment Data]
    }

    database "NoSQL Database" as NoSQLDB {
        [Session Data]
        [Cart Data]
        [Order Status]
    }

    cloud "Cache" as Cache {
        [Cart Cache]
        [Menu Cache]
        [Session Cache]
    }


}

queue "Message Queue" as MessageQueue {
    [Order Queue]
    [Payment Queue]
    [Notification Queue]
}


'----User Interaction----
Customer --> APIGateway : HTTP Requests
Cook --> APIGateway : HTTP Requests
Admin --> APIGateway : HTTP Requests

'----API Gateway to Services----
APIGateway --> LB : Routes Requests

LB --> CartService : Cart Operations
LB --> MenuService : Menu Operations
LB --> OrderService : Order Operations
LB --> WaitTimeService : Wait Time Calculation
LB --> PaymentService : Payment Processing
LB --> TrackingService : Order Tracking
LB --> OrderManagementService : Order Management
LB --> UserManagementService : User Management
LB --> MenuManagementService : Menu Management
LB --> ReportingService : Reporting

'----Service to Service Communication----
OrderService -u-> AuthService : Verify Identity
OrderService --> PaymentService : Trigger Payment
PaymentService --> OrderService : Confirm Payment
OrderService --> TrackingService : Notify Tracking
TrackingService --> OrderManagementService : Notify Cooks
WaitTimeService --> OrderService : Update Wait Time

'----Service to Cache Communication----
CartService --> Cache : Cache Cart Data
MenuService --> Cache : Cache Menu Items
TrackingService --> Cache : Cache Order Status
AuthService --> Cache : Cache Session Data

'----Service to Database Communication----
AuthService --> SQLDB : Store User Data
OrderService --> SQLDB : Store Order Data
PaymentService --> SQLDB : Store Payment Data
TrackingService --> NoSQLDB : Store Order Status
CartService --> NoSQLDB : Store Cart Data
MenuService --> NoSQLDB : Store Menu Data

'----Service to Message Queue Communication----
OrderService --> MessageQueue : Queue Order Processing
PaymentService --> MessageQueue : Queue Payment
NotificationService --> MessageQueue : Queue Notifications

'----Service to CDN Communication----
MenuService --> CDN : Serve Menu Images
MenuManagementService --> CDN : Upload Menu Images

'----Service to Monitoring and Logging Communication----
AuthService --> MonitoringLogging : Log Authentication Events
OrderService --> MonitoringLogging : Log Order Events
PaymentService --> MonitoringLogging : Log Payment Events
TrackingService --> MonitoringLogging : Log Order Status
NotificationService --> MonitoringLogging : Log Notifications

@enduml
